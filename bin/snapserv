#! /bin/bash

#     snap is a utility to store some directories on a server, versioned.
#
# Copyright (C) 2014-2016, Human Rights Data Analysis Group (HRDAG)
#     https://hrdag.org
#
# This file is part of snap.
#
# snap is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# snap is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with snap.  If not, see <http://www.gnu.org/licenses/>.

PATH=$PATH:/usr/local/bin		# so can find snaplib.sh & lockpid
source snaplib.sh || exit 1

umask 02			  # we use group permissions for authorization
declare -i max_snapshots_to_check=10	# can change in config file, see below

Usage="
Usage: $our_name [options] [project(s)]
   Options:
	-c: convert metadata of projects (defaults to all projects)
	-r dir: dir is Root directory of snap projects
	-V: show current version

	-d: Debug shell script (don't run commands, just show them)
	-t: Trace shell script (show commands as they execute)"

do_convert=$false
snapserv_root=
Run= Trace= debug_opt= trace_opt=
while getopts "cr:V dthk" arg
    do  case $arg in
	   ( c ) do_convert=$true ;;
	   ( r ) snapserv_root=$OPTARG ;;
	   ( V ) error "version $Version" ;;

	   ( d ) Run=echo       debug_opt=-d ;; # put $Run before 'active' cmds
	   ( t ) Trace="set -x" trace_opt=-t ;;
	   (h|k) print_or_egrep_Usage_then_exit "$@" ;;
	   ( * ) error "$Usage" ;;
	esac
done
let OPTIND=$OPTIND-1
shift $OPTIND
unset arg

readonly original_dir=$PWD

# can set: snapserv_root rm_authorized_users max_snapshots_to_check
our_config=/etc/$our_name.sh
source_config $our_config
readonly   snapserv_root rm_authorized_users max_snapshots_to_check
[[ $snapserv_root ]] || error "need to set snapserv_root in $our_config"

readonly log=${log:-$snapserv_root/.$our_name.log}
if [[ ${SSH_CLIENT-} ]]
   then readonly who_am_i=$LOGNAME@${SSH_CLIENT%% *}
   else readonly who_am_i=$LOGNAME	# snaplib looks for this variable
fi

log() { [[ -w $log ]] && echo "$date $who_am_i: $*" >> $log; }

[[ $1 == -d ]] && { Run=echo; shift; }
if [[ $1 == -c ]]
   then shift
	cd_ $snapserv_root
	for project in ${*:-*}
	    do	cd_ $snapserv_root/$project
		for snapshot in s[1-9]*
		    do	dir=$snapserv_root/$project/$snapshot
			[[ -d $dir ]] || continue
			cd_   $dir
			convert_snap_metadata && pwd
		done
	done
	exit
fi

[[ ${SSH_ORIGINAL_COMMAND-} ]] || SSH_ORIGINAL_COMMAND="{local} $*"

# echo "$@" | write scott pts/0; exit 1
log "+ $SSH_ORIGINAL_COMMAND"

case $SSH_ORIGINAL_COMMAND in
  ( "{local} fix"*   )	is_rsync=$false ;;
  ( "{local} write"* )	is_rsync=$false ;;
  ( *[^-=._a-zA-Z0-9/\ *]* ) # optional, for globbing: {,} [^\]
		error    "illegal character(s): $SSH_ORIGINAL_COMMAND" ;;
  ( *..* )      error    "can't use .. in path: $SSH_ORIGINAL_COMMAND" ;;
  ( *[\	\ ]/* ) error "can't use absolute path: $SSH_ORIGINAL_COMMAND" ;;
  # the next two patterns are duplicated in repo-serv
  ( 'snap '*		) is_rsync=$false ;;
  ( 'rsync --server '*	) is_rsync=$true  ;;
  ( * ) error "this can only be called by 'vcs-serve' on behalf of 'snap'" ;;
esac

cd_ $snapserv_root

# see set_rsync_opts() in 'snap' command
if [[ ${SSH_CONNECTION-} == 127.0.0.* ]]
   then rsync_compress_opt=
   else rsync_compress_opt=$rsync_max_compress_opt
fi
readonly rsync_opts="$rsync_server_opts $rsync_compress_opt"

[[ $Trace ]] && exec 2>> $log.dbg

# ----------------------------------------------------------------------------

abort_if_client_too_old() {
	local sleep_time=${1-}

	set_version_num $Version_required
	local required_version_num=$version_num

	set_version_num ${HRDAG_SNAP_VERSION-0.0.0}
	(( $version_num >= $required_version_num )) && return 0

	warn "Your 'snap' command is too old; you need to
run \"git pull\" in your 'snap' workspace (HRDAG/snap.git checkout)."

	[[ ${HRDAG_SNAP_VERSION-} ]] ||
	warn "If you still get this error after updating your 'snap' command,
you probably forgot to run \"ssh -O exit $default_snap_host\"; otherwise,
email the file ~/.ssh/config to $maintainer,
so he can debug your problem."

	[[ $sleep_time ]] || exit 1

	warn "You can hit CTRL-C when you're ready to fix this problem."
	$Run sleep $sleep_time
	exit 1
}

fix_perms_on_pushed_files() {
	# --silent cuz rsync can hard-link a file from another user's shapshot
	chmod --recursive --silent ug+rwX,o+rX,o-w "$@"
}

rsync_cmd() {

	data_dir=${SSH_ORIGINAL_COMMAND##* }
	project=${data_dir%%/*}
	[[ $project ]]    || error "expected snap command, got random rsync"
	[[ -d $project ]] || error "project '$project' doesn't exist"

	if   [[ $SSH_ORIGINAL_COMMAND == *' --sender '* ]] # snap pull?
	   then abort_if_client_too_old 1m		   # needed fixes?
		exec rsync --server --sender $rsync_opts . $data_dir
		error "exec rsync => $?"
	elif [[ $SSH_ORIGINAL_COMMAND == */HEAD/.snap/ ]] # writing push.log?
	   then rsync --server $rsync_opts . $data_dir
		local status=$?
		fix_perms_on_pushed_files $data_dir
		[[ $status == 0 ]] && exit 0
		error "exec rsync => $status"
	fi

	data_dir=${data_dir%/}
	[[ $data_dir == $project ]] || error "you can only checkin a new HEAD"

	# client continually runs rsync, so wait after any error messages
	abort_if_client_too_old 1m

	cd_ $project

	# if 'snap push' sees 'Write failed: Broken pipe', sshd & rsync hang.
	# if the user is running an rsync from/to/on this server and/or
	# is running a snap push or pull, a new 'snap push' will kill them all.
	for signal in HUP TERM KILL
	    do	ps -fC rsync |  grep --quiet "^$LOGNAME\b.* --server " || break
		killall -v --process-group --user $LOGNAME -s $signal rsync
		sleep 0.5
	done
	readonly lock=$PWD/.lock
	lockpid $lock || 
	   error "can't get lock: $(ls $ls_opts -l $lock)"

	# recover from a failed "atomic" operation (see end of this function)
	[[ ! -s HEAD && -s HEAD.old ]] && run_cmd mv HEAD.old HEAD

	head=$(readlink HEAD)
	declare -i head_num=${head#s}	# defaults to 0 if 'head' is blank
	declare -i new_head_num=head_num+1
	new_head=s$new_head_num
	my_new_head=$new_head.$LOGNAME

	rm -rf $new_head HEAD.*		# could have old, failed attempt

	chmod --silent g+s .	 # not sure why this can fail (on empty repo)
	run_cmd mkdir -p $my_new_head/.snap # .snap needed for first push (?)
	cd_ $my_new_head

	declare -i snapshots_used=0 snapshot_num my_snapshot_num=0
	link_dest_opts=
	# we can't hard-link a symlink owned by a different user, so the
	# first snapshot checked should be the latest one created by this user.
	for ((  snapshot_num=$head_num; $snapshot_num > 0; snapshot_num-=1 ))
	    do	snapshot=../s$snapshot_num
		[[ -d $snapshot ]] || continue
		set -- $(ls -ldn $snapshot)
		[[ $3 == $UID ]] || continue
		link_dest_opts="--link-dest=$snapshot"
		snapshots_used+=1
		my_snapshot_num=$snapshot_num
		break
	done
	for ((  snapshot_num=$head_num; $snapshot_num > 0; snapshot_num-=1 ))
	    do	snapshot=../s$snapshot_num
		[[ -d $snapshot ]] || continue
		(( $my_snapshot_num == $snapshot_num )) && continue
		link_dest_opts="$link_dest_opts --link-dest=$snapshot"
		   snapshots_used+=1
		(( snapshots_used < max_snapshots_to_check )) || break
	done
	# log $link_dest_opts

	# copy the client's data into our current (user-private) directory;
	# no matter what the sender says, enforce the perms we want.
	run_cmd rsync --server $rsync_opts $link_dest_opts \
		      --perms --chmod=Dg+s,ug+rw,o-w,+X \
		      --relative --delete . .
	rm -f .snap/revision && echo "$project/$new_head" > .snap/revision ||
	   error "snap repo full, or out of inodes??"
	if [[ -s .snap/paths-to-delete ]]
	   then run_cmd xargs rm -f < .snap/paths-to-delete
		run_cmd rm .snap/paths-to-delete
		# delete empty directories
		find * -depth -type d -print0 |
		xargs --null --no-run-if-empty rmdir --ignore-fail-on-non-empty
	fi
	write_metadata
	fix_perms_on_pushed_files .
	cd_ ..

	run_cmd mv $my_new_head $new_head
	run_cmd ln -s $new_head HEAD.new
	trap '' 1 2 3 15		# don't die, need "atomic" operation
	[[ -s HEAD ]] && run_cmd mv HEAD HEAD.old
	if mv HEAD.new HEAD
	   then rm -f  HEAD.old
	   else mv HEAD.old HEAD
	fi
	rm -rf $new_head.*      # could have another user's old, failed attempt

	rm $lock
}

# ----------------------------------------------------------------------------
# fixit code
# ----------------------------------------------------------------------------

header() { echo -e "\n==> $* <=="; }

set_next_snapshot() {
	local snapshot=$1

	declare -i rev=${snapshot#s}
	declare -i next_rev=rev+1
	next_snapshot=s$next_rev
}

declare -i file_seconds
set_file_seconds() {
	local snapshot=$1

	local file=$snapshot/.snap/push.log
	file_seconds=$(date --reference="$file" '+%s')
	(( $file_seconds )) || error "couldn't get date on $PWD/$file"
}

fix_push_log() {
	local project=$1

	header $project
	cd_  $original_dir/$project
	project=$(basename $project)
	local lock=.lock
	$Run lockpid $lock || error "restart at $project"
	local head_snapshot=$(readlink HEAD)
	set_next_snapshot  $head_snapshot
	local new_snapshot=$next_snapshot
	$Run cp -al $head_snapshot $new_snapshot
	[[ $Run ]] && new_snapshot=$head_snapshot

	# this is the guts, the rest is overhead
	local head_log=$new_snapshot/.snap/push.log
	declare -i log_seconds file_seconds
	while read record
	    do	local snapshot=${record%% |*}
		snapshot=${snapshot#$project/}
		local timestamp=$(echo "$record" | cut -d'|' -f3)
		log_seconds=$(date --date="$timestamp" '+%s')
		set_file_seconds $snapshot
		next_snapshot=
		declare -i time_diff=file_seconds-log_seconds
		# snap's update_log creates log timestamp then appends it
		until (( 0 <= $time_diff && $time_diff <= 2 ))
		   do	[[ ! $next_snapshot ]] || 
			   warn "unknown: $record" || break
			set_next_snapshot $snapshot
			set_file_seconds $next_snapshot
			time_diff=file_seconds-log_seconds
		done
		[[ $next_snapshot ]] && 
		   record=${record/$snapshot/$next_snapshot}
		echo "$record"
	done <  $head_log > $head_log.new &&
	$Run mv $head_log.new $head_log &&

	$Run rm HEAD && $Run ln -s $new_snapshot HEAD
	$Run rm $lock
}

# ----------------------------------------------------------------------------

snap_cmd() {

	set -- $SSH_ORIGINAL_COMMAND
	shift; action=$1; shift

	case $action in
	   ( df )
		[[ $# == 0 || ( $# == 1 && $1 == -* ) ]] ||
		   error "only one arg allowed, and it must be option(s)"
		run_cmd $action -h "$@" . ;; # only operate on current dir
	   ( ln )
		[[ $# == 3 && $1 == -s ]] || error "can only create symlinks"
		target=$2 tag_name=$3
		[[ $target == */s[1-9]* && $target != */*/* &&
		   $tag_name != */* ]] || error "ln -s CC/s## tag-name"
		project=$(dirname $target) rev=$(basename $target)
		[[ -d $project ]] || error "project '$project' doesn't exist"
		cd    $project    || error "project '$project' is inaccessible"
		[[ -d $rev ]] || error "snapshot '$rev' doesn't exist"
		[[ ! -e  $tag_name ]] ||
		   error "tag-name exists: $(ls $ls_opts -ld $tag_name |
						iso_ll_field_selector)"
		run_cmd ln -s $rev $tag_name ;;
	   ( rm )
		[[ " "${rm_authorized_users:-NoNe}" " == *" $LOGNAME "*  ]] ||
		   error "you're not authorized to run '$action'"
		[[ $action != rm || ${!#} == */?* ]] ||
		   error "can't delete whole projects"
		run_cmd $action "$@" ;;
	   ( du | ls | cat | head | tail )
		[[ $action == ls ]] && set -- $ls_opts "$@"
		$action "$@" ;;
	   ( fix )			# only for a repo hacker to run locally
		cd_ $original_dir
		[[ $* != *[^-\ a-zA-Z]* ]] ||
		   error "illegal character in args: $*"
		for project in ${*:-[A-Z]*}
		    do	project=${project%/HEAD}
			[[ $(basename $project) == [A-Z]* ]] ||
			   error "project(s)"
			[[ -d $project/HEAD ]] || continue
			fix_push_log $project			
		done ;;
	   ( write*metadata )	       # only for a repo hacker to run locally
		cd_ $original_dir
		[[ $PWD == */.snap ]] && cd_ ..
		[[ $(/bin/pwd) =~ $snapserv_root/[A-Z][A-Z][^/]*/s[0-9]+$ ]] ||
		   error "need to be in a snapshot"
		write_metadata ;;	# repo versions, user won't over-write
	esac
}

$Trace

if [[ $is_rsync ]]
   then rsync_cmd
   else  snap_cmd
fi
