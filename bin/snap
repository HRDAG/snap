#! /bin/bash

#     snap is a utility to store some directories on a server, versioned.
#
#     Copyright (C) 2014-2017, Human Rights Data Analysis Group (HRDAG)
#     https://hrdag.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# if running as root, want Linux version of snap (package manager)
[[ $UID != 0 ]] || PATH=/usr/bin:$PATH exec snap "$@" || exit $?

source snaplib.sh || exit 1

# snap_host can also be set in .snap/config.sh, ~/.snap.sh, /etc/snap/snap.sh
if [[ -s /etc/snap/snapserv.sh ]]
   then user=${LOGNAME:-$USER}
	snap_host=${user%-r}@localhost
   else snap_host=$default_snap_host
fi

# 'ls' less useful (du shows non-empty repos, log has details of snapshots):
#      ls   [project]: show repos [or our snapshots]; many repos are empty ...
Usage="
Usage: $our_name [options] action [args]
   Current actions are:
      origin: show server (and optional account) used to store snapshots
      pull [snapshot]: pull project snapshot (defaults to HEAD)
      push {-m msg|-F msg-file} [tag]: push workspace, then optionally tag
      stat [diff-opts]: show status of added/deleted/modified files
      tag  [snapshot] tag-name: tag snapshot (defaults to HEAD)
      tags [project]: show all tags , defaults to workspace project
      log  [project]: show all snaps, defaults to workspace project
      du   [project]: 'du' project(s), defaults to workspace project
      df [-i]: show free space (or inodes if -i) in repository
   Common options:
	-s server: specify repository server (run '$our_name origin' for default)
	-v: run rsync in verbose mode (can use multiple times)
	-V: show current version

	-d: Debug shell script (don't run commands, just show them): simulation
	-t: Trace shell script (show commands as they execute), -tt for verbose
"

_snap_host= rsync_verbose_opt= Run= Trace= trace= debug_opt= trace_opt=
while getopts "s:vV dthk" arg
    do  case $arg in
	   ( s ) _snap_host=$OPTARG ;;
	   ( v ) rsync_verbose_opt="-v $rsync_verbose_opt" ;;
	   ( V ) error "version $Version" ;;

	   ( t ) [[ $Trace ]] && readonly trace=$Trace
		 Trace="set -x" trace_opt=-t ;;
	   ( d ) Run=echo       debug_opt=-d ;; # put $Run before 'active' cmds
	   (h|k) print_or_egrep_Usage_then_exit "$@" ;;
	   ( * ) error "$Usage" ;;
	esac
done
let OPTIND=$OPTIND-1
shift $OPTIND
unset arg

[[ $# != 0 ]] || error "$Usage"

readonly _snap_host rsync_verbose_opt

export HRDAG_SNAP_VERSION=$Version

[[ $trace && $Run ]] && Run=:

# ----------------------------------------------------------------------------
# support functions
# ----------------------------------------------------------------------------

 project=
local_rev=

set_rsync_opts__snap_host() {

	[[ ${_snap_host-} ]] && snap_host=$_snap_host
	readonly snap_host

	# see code in front of rsync_cmd() in 'snapserv'
	if [[ ${snap_host#*@} == localhost ]]
	   then local rsync_compress_opt=
	   else local rsync_compress_opt=$rsync_max_compress_opt
	fi
	readonly \
	rsync_opts="$rsync_client_opts $rsync_verbose_opt $rsync_compress_opt"

	check_env			# this needs snap_host
}

# ---------------------------------

cd___source_config___set_project__local_rev__rsync_opts__snap_host() {

	source_config /etc/snap/snap.sh
	source_config ~/.snap.sh
	[[ ${administrator-} ]] || administrator=$maintainer

	local cwd=$PWD
	cd_ $(/bin/pwd)			# avoid symlink weirdness
	until [[ -d .git ]]
	   do	cd_ ..
		[[ $PWD != / ]] && continue
		cd_ $cwd
		set_rsync_opts__snap_host
		return 1
	done

	[[ $PWD != */snap ]] || error "must run $our_name in a data project"
	convert_snap_metadata

	local dir
	for dir in $snappable_subdirs
	    do	grep --quiet --no-messages "^$dir/$" .gitignore && continue
		echo $dir/ >> .gitignore
	done

	run_cmd mkdir -p .snap		# needed for new project
	project=$(basename $PWD)
	[[ -s .snap/revision ]] && local_rev=$(< .snap/revision)

	source_config .snap/config.sh
	set_rsync_opts__snap_host
	readonly project local_rev

	return 0
}

# ----------------------------------------------------------------------------

check_env() {

	egrep --quiet '^[[:space:]]*SendEnv[=[:space:]]+HRDAG_SNAP_VERSION($|[[:space:]])' ~/.ssh/config && return 0

	warn 'you need to add "SendEnv HRDAG_SNAP_VERSION" to ~/.ssh/config,
either in a "Host *" stanza, or in your eleanor (aer) stanza'

	egrep --quiet '^[[:space:]]*ControlMaster[=[:space:]]' ~/.ssh/config&&
	warn "after you update ~/.ssh/config, you should run:
	ssh -O exit $snap_host 2>&1 | egrep -v ': No such file or directory$'
but _only_ after you finish your work in any login sessions, or tunnels
to RStudio or Jupyter Notebook services, since they'll all be killed"

	exit 1
}

# ----------------------------------------------------------------------------

is_workspace_modified() {

	write_metadata			# caller expects this always happens
	[[ -s  .snap/files-repo ]] || return 0 # this might be the first push
	set -- .snap/files-{repo,local}
	sort_files_in_place $*
	! cmp --quiet $*
}

# ----------------------------------------------------------------------------

server_snap() {

	[[ -o xtrace ]] && local xtrace= || local xtrace="set +x"
	$Trace
	ssh $snap_host snap "$@"
	local status=${PIPESTATUS[0]}
	$xtrace
	return $status
}

# ---------------------------------

readonly ignored=.snap/ignored

# the 'q' is for quiet, this command silently ignores errors
server_snap_q() {

	server_snap "$@" 2>> $ignored
}

# ----------------------------------------------------------------------------

# -------------------------------------------------------

run_server_snap() {

	server_snap "$@" || error "server_snap $* => $?"
}

# -------------------------------------------------------

run_rsync_cmd() {

	[[ -o xtrace ]] && local xtrace= || local xtrace="set +x"
	$Trace
	$Run rsync $rsync_opts --out-format='%n%L (%bB -> %lB)' "$@" ||
	   error "rsync $* => $?"
	$xtrace
}

# ----------------------------------------------------------------------------

set_snappable_dirs() {

	set -- *
	[[ "$*" == '*' ]] && return 1

	local dir find_opts=
	for dir in $snappable_subdirs
	    do	find_opts="$find_opts -name $dir -o"
	done
	find_opts=${find_opts% -o}
	snappable_dirs=$(run_cmd find $* -type d \( $find_opts \) | sort)
	[[ $snappable_dirs ]]
}

# ----------------------------------------------------------------------------

reversed_lines() {

	if have_cmd tac			# 'tac' is 'cat' spelled backwards
	   then tac     "$@"		# the GNU way
	   else tail -r "$@"		# the Darwin/BSD way
	fi
}

# ----------------------------------------------------------------------------
# snap actions
# ----------------------------------------------------------------------------

snap_origin() {

	[[ $# == 0 ]] || error "arguments not allowed"

	echo -e "\n${our_name%% *} assumes: snap_host=$snap_host"
}

# ----------------------------------------------------------------------------

files_to_paths() {
	local metadata_file=${1-}	# written by write_metadata

	# pull out filename carefully, could be spaces in filename
	#   (2nd expression breaks if filename contains a pair of spaces)
	# 'sort' is used because files are sometimes mis-sorted
	sed -n '/ -> /s/ -> .*//p; / UTC$/s/  .*//p' $metadata_file | sort
}

# ---------------------------------

modified_paths() {
	local src=${1:-.snap/files-repo} dst=${2:-.snap/files-local}

	write_metadata
	sort_files_in_place $src $dst
	diff --unified=0 $src $dst | sed -n '/^+[^+]/s/^.//p' | files_to_paths
}

# ---------------------------------

deleted_paths() {
	local old_metadata_file=$1 new_metadata_file=$2

	local old_paths=$tmpdir/${our_name%% *}-old.$$
	local new_paths=$tmpdir/${our_name%% *}-new.$$
	files_to_paths $old_metadata_file > $old_paths || error $old_paths
	files_to_paths $new_metadata_file > $new_paths || error $new_paths
	run_cmd comm -23 $old_paths $new_paths | uniq
	run_cmd rm $old_paths $new_paths
}

# ---------------------------------

permission_denied_error() {
	error "you don't have access to $1, ask $administrator for permission"
}

# ---------------------------------

snap_pull() {
	if [[ ${1-} == -i ]]
	   then shift
		local is_internal=$true
	   else local is_internal=$false
	fi
	local _project=${1:-$project}
	[[ $_project ]] || error "need to specify a project or be in workspace"
	if [[ $_project == */* ]]
	   then # if want archived snapshot, can pull into archived git project
		# [[ ! $project ]] || error "can only pull HEAD into workspace"
		local snapshot=$_project
	   else local snapshot=$_project/HEAD
	fi
	_project=${_project%/*}

	run_cmd mkdir -p .snap		# needed for new project
	local ls_rev=$tmp_1 ls_proj=$tmp_2
	if     server_snap ls -d $snapshot >> $ignored 2> $ls_rev ; then true;
	elif ! server_snap ls -d $_project >> $ignored 2> $ls_proj
	   then if grep -q '^ls: cannot access ' $ls_proj
		   then error "project '$_project' doesn't exist"
		   else cat $ls_proj
			exit 1
		fi
	elif grep -q ': Permission denied$' $ls_rev
	   then permission_denied_error $_project
	elif grep -q ': No such file or directory$' $ls_rev
	   then if [[ $snapshot == */HEAD ]]
		   then error "$_project is empty, someone must 'push'"
		elif [[ $snapshot == */s[0-9]* ]]
		   then local type=snapshot
		   else local type=tag
		fi
		error "$type '$snapshot' doesn't exist"
	fi

	[[ ${1-} && $(basename $PWD) != $_project ]] &&
	   run_cmd mkdir -p $_project

	local old_repo_files=$tmp_1 our_modified=$tmp_2 HEAD_modified=$tmp_3
	local deleted_paths=$tmp_4 spurious_paths=$tmp_5 spurious_dirs=$tmp_6
	if [[ -s .snap/files-repo && ! $is_internal ]]
	   then sort_files_in_place .snap/files-repo
		run_cmd cp .snap/files-repo $old_repo_files
	   else run_cmd cp /dev/null        $old_repo_files
	fi
	run_cmd cp /dev/null $our_modified

	local dst=.  _rsync_opts=
	if [[ $is_internal ]]
	   then true
	elif [[ ! $project ]]
	   then dst=$_project
		run_cmd mkdir -p $dst/.git # so looks like a workspace
	elif set_snappable_dirs
	   then modified_paths > $our_modified
		[[ -s $our_modified ]] &&
		   # don't replace locally-modified files (we'll report later)
		   _rsync_opts=--exclude-from=$our_modified
	fi

	# now do the pull
	[[ -s $rsync_output ]] && mv $rsync_output $rsync_output.old
	run_rsync_cmd $_rsync_opts $snap_host:$snapshot/ $dst/ 2>&1 |
	   tee $rsync_output
	cd_ $dst
	sort_files_in_place .snap/files-*
	[[ -s .snap/files-pre-push ]] ||
	   run_cmd cp .snap/files-repo .snap/files-pre-push

	[[ $is_internal || ! -s $old_repo_files ]] &&
	   rm -f $tmp_files && return 0

	# let user delete local files that were deleted from latest snapshot(s)
	deleted_paths $old_repo_files .snap/files-repo > $deleted_paths
	write_metadata
	files_to_paths .snap/files-local | # ignore files we don't have ...
	  comm -12 $deleted_paths - > $spurious_paths
	if [[ -s $spurious_paths ]]
	   then sed 's@/[^/]*$@@' $spurious_paths | sort -u > $spurious_dirs
		set -- $(sed 's@/.*$@@' $spurious_dirs | uniq)
		local parent_dirs=$*
		local rm_parents_cmd="find $* -depth -type d -print0 | xargs -0 rmdir >& /dev/null"
		local ls_dirs="\n$(tr '\n' '\0' < $spurious_dirs | xargs -0 ls -CdF | sed 's/^/  /')"

		warn "Most/all the files in these directories disappeared (probably from a rename):
			$ls_dirs"
		local flag what="to delete such missing files"
		read -n 1 -e -p "Type 'y' $what: " flag
		[[ $flag == [yY]* ]] &&
		tr '\n' '\0' < $spurious_paths | xargs -0 $Run rm -f || {
		local deletes_file=.snap/deletes-ignored
		$Run cp $spurious_paths $deletes_file
		warn "files not deleted; if you change your mind, delete with:

		cd $PWD &&
		tr '\\\\n' '\\\\0' < $deletes_file | xargs -0 rm -f &&
		$rm_parents_cmd &&
		rm $deletes_file"
		}

		# delete any empty parent dirs
		[[ $parent_dirs ]] && eval $rm_parents_cmd
	fi

	[[ ! -s $our_modified ]] && rm -f $tmp_files && return 0
	# report (once) any "conflicts": files modified by us and someone else
	modified_paths $old_repo_files .snap/files-repo > $HEAD_modified
	# find files modified by both us and HEAD
	local conflict_files=$(comm -12 $our_modified $HEAD_modified)
	rm -f $tmp_files
	[[ $conflict_files ]] || return 0

	warn "since your previous pull, both you and someone else modified these file(s):"
	echo "$conflict_files" | sed 's/^/  /' >&2
	warn "this pull did _not_ replace your local version(s) of these files.
  (If you want to see the repo's version, temporarily rename yours then pull.)
  You won't see this warning again: you must consider these conflicts now."
	return 0
}

# ----------------------------------------------------------------------------

comment=

set_comment() {
	if [[ ${1-} != -* ]]
	   then [[ ${1-} != *' '* ]] ||
		   error "argument contains spaces; did you forget -m ?"
		error "use -m or -F to specify a commit message (-h for help)"
	fi
	if   [[ $1 == -m ]]
	   then comment=${2-}
		[[ $comment ]] || error "-m needs a string"
	elif [[ $1 == -F ]]
	   then local file=${2-}
		[[ $file && -s $file ]] || error "-F needs a file that exists"
		comment=$(< $file)
	elif [[ $1 == -h ]]
	   then print_or_egrep_Usage_then_exit push
	   else error "$1 is unrecognized option"
	fi
	# each log record is a single line
	comment=$(echo -n "$comment" | tr '\n' ' ')
	[[ $comment ]]
}

# --------------------------------------------

update_log() {
	local rev=$1

	local   _date=$(date -u '+%F %T UTC (%a)')
	local  record="$rev | $LOGNAME | $_date | ${comment:---}"
	echo "$record" >> .snap/push.log &&
	$Run \
	rsync $rsync_opts -q .snap/push.log $snap_host:$project/HEAD/.snap/
}

# --------------------------------------------

is_head() {

	local err=$tmp_5
	head_rev=$(server_snap cat $project/HEAD/.snap/revision 2>$err) #global
	egrep --quiet ': Permission denied$' $err &&
	   permission_denied_error $project
	egrep -v ': No such file or directory$' $err # OK if cat fails
	egrep --quiet snapserv: $err && exit 1	     # snapserv error?
	[[ ! $head_rev && $local_rev ]] && error "missing $project/HEAD ?"
	[[ ! $head_rev || $local_rev == $head_rev ]]
}

# --------------------------------------------

file_contains_restartable_rsync_error() {
	local file=$1

	# OS X rsync sometimes exits after 'Write failed: Broken pipe'
	# (which can occur on an ssh connection, even with Linux); the broken
	# pipe might be related to our svn server's CentOS-6 kernel (an
	# iptables ACK rule was added, but that didn't help).
	# The 'Broken pipe' error happens with OS X's rsync-2.6.9 (protocol 29)
	# and OS X's brew's rsync-3.1.0 (protocol 31); the svn server runs
	# rsync-3.0.6 (protocol 30).
	# we've generalized this check to any unexpected connection close.
	fgrep --quiet 'rsync: connection unexpectedly closed' $file
	return $?
}

# --------------------------------------------

snap_push() {
	set_comment "$@" && shift 2
	[[ $# == [01] && ${1-} != -* ]] || print_or_egrep_Usage_then_exit push
	local tag=${1-}

	abort_if_bad_tag_name $tag

	[[ $project ]] || error "can only 'push' when inside a project"

	# is_workspace_modified runs write_metadata, writes .snap/files-local
	if ! is_workspace_modified && [[ $(server_snap_q ls $project/HEAD) ]]
	   then echo "No local changes, no 'push' needed."
		return 1
	fi

	is_head || error "your workspace is not HEAD, must do a 'pull' first"

	set_snappable_dirs || error "no directories to push"
	# we use group perms for authorization: make files group-accessible
	run_cmd -w chmod -R ug+rwX $snappable_dirs

	server_snap_q touch $project ||
	   error "you need write access to $project, contact: $administrator"

	local paths_to_delete=.snap/paths-to-delete # snapserv uses this file
	sort_files_in_place .snap/files-*
	if [[ -s .snap/files-pre-push ]]
	   then local before_paths=$tmp_1
		# I'm not sure we need both these files
		files_to_paths .snap/files-{pre-push,repo} |
		   sort -u > $before_paths
		files_to_paths .snap/files-local |
		   comm -23  $before_paths -
		run_cmd rm   $before_paths
	   else true
	fi >  $paths_to_delete
	[[ -s $paths_to_delete ]] || paths_to_delete=

	local failed_to_hard_link_RE='rsync: failed to hard-link .* (1) *$'
	local failure_summary_RE=' (code 23) at \| => 23 *$'
	[[ -s $rsync_output ]] && mv $rsync_output $rsync_output.old
	while true
	   do	# pipeline runs rsync in separate process: ok if exits on error
		run_rsync_cmd --delete --relative \
			      --exclude=$ignored  \
			      --exclude=.*[Cc]ache* \
			      --exclude=.snap/revision \
			      --exclude=.snap/files-repo* \
				  $paths_to_delete $snappable_dirs \
				  $snap_host:$project/ 2>&1 |
		   tee $rsync_output |
		   # don't show unchanged files (i.e. sent 0 bytes).
		   # can't hard-link a symlink we don't own; later, we'll
		   #    check to make sure the errors involve symlinks
		   grep -v -e ' (0B -> ' \
			   -e "$failed_to_hard_link_RE" \
			   -e "$failure_summary_RE"
		local status=${PIPESTATUS[0]} # rsync's exit status
		[[ $status == 0 ]] && break
		file_contains_restartable_rsync_error $rsync_output &&
		 { warn "rsync exited with $status, continuing where left off";
		   continue; }
		# if hard-link errors, break to show any that aren't symlinks
		grep --quiet "$failed_to_hard_link_RE" $rsync_output &&
		   break || exit 1
	done

	# if we had hard-link errors, make sure they were all symlinks
	local  failed_to_hard_link_errors=$tmp_2
	grep "$failed_to_hard_link_RE" $rsync_output > \
	      $failed_to_hard_link_errors
	local found_non_symlink_error=$false
	local line
	while read line
	   do	# error msg: rsync: failed to hard-link ../s*/* with *: * (1)
		local local_file=$(echo "$line" | sed 's/.* with //; s/: .*//')
		[[ -L "$local_file" ]] && continue
		echo "$line"
		found_non_symlink_error=$true
	done < $failed_to_hard_link_errors
	if [[ $found_non_symlink_error ]]
	   then grep "failure_summary_RE" $rsync_output
		[[ $status == 0 ]] ||
		   error "Permission problem on server, contact $administrator"
	fi

	run_cmd cp .snap/files-local .snap/files-pre-push

	snap_pull -i 2>&1 |		# grab the new snapshot's .snap/* files
	   egrep -v '^\.snap/| |^$'	# but don't show .snap/* (or -v msgs)
	local  status=${PIPESTATUS[0]}	# snapserv's or rsync's exit status
	if [[ $status != 0 ]]
	   then echo; echo
		if snap_pull -i 2>&1 | grep "^snap push: "
		   then exit ${PIPESTATUS[0]}
		   else error "couldn't pull snap's metadata: .snap/*"
		fi
	fi

	local new_rev=$(< .snap/revision)
	warn "successfully pushed $new_rev"

	update_log $new_rev	   # run _after_ 'snap_pull -i', so latest log

	[[ $tag ]] && snap_tag $new_rev "$tag" # ... similarly
	return 0
}

# ----------------------------------------------------------------------------

abort_if_bad_tag_name() {
	local tag_name=${1-}

	case $tag_name in
	   (		 HEAD* ) error   "HEAD* is disallowed for tag names" ;;
	   (           s[0-9]* ) error "s[0-9]* is disallowed for tag names" ;;
	   (     [^a-zA-Z0-9]* ) error "start tag-name with alphanumeric"    ;;
	   ( *[^-._a-zA-Z0-9]* ) error "make tag-name with alphanum & '-._'" ;;
	esac
}

# ---------------------------------

snap_tag() {
	[[ $# == [12] ]] || error "[snapshot] tag-name"
	if [[ $# == 2 ]]
	   then local target=$1		tag_name=$2
	   else local target=$local_rev	tag_name=$1
		is_workspace_modified &&
		error "workspace pulled from $local_rev, but has been modified"
	fi

	[[ $target != */* && $project ]] && target=$project/$target

	# these tests are duplicated in snap_cmd in snapserv
	[[ $target == */s[1-9]* && $target != */*/* ]] ||
	    error "illegal snapshot target: $target"

	abort_if_bad_tag_name $tag_name

	run_server_snap  ln -s $target $tag_name
	echo "$tag_name -> $target"
}

# ----------------------------------------------------------------------------

snap_stat() {
	[[ $project ]] || error "need to be in a data project"

	write_metadata
	sort_files_in_place .snap/files-*
	diff --unified=0 "$@" .snap/files-repo .snap/files-local &&
	   echo "No changes (local files not changed since pulled from repo)."
}

# ----------------------------------------------------------------------------

_snap_ls() {
	local _ls_opts=$1 egrep_opts=$2; shift 2
	[[ $# == 1 || $project ]] || error "not in workspace, specify project"
	local _project=${1:-$project}

	run_server_snap ls $_ls_opts "$_project/*" |
	  # remove prefix pattern:  [A-Z]{2}[^/ ]*
	  egrep $egrep_opts '/s[1-9][0-9]*$'
}

# ------------------------------------

snap_tags() { _snap_ls -ld   -v "$@" | fgrep ' -> ' | iso_ll_field_selector; }
snap_log_() { _snap_ls -ldtr '' "$@"; }	# old way
snap_log () {				# new way
	local _project=${1:-$project}
	[[ $_project ]] || error "need to specify a project or be in workspace"

	[[ $_project == $project ]] || { snap_log_ "$@"; return; }

	if ! is_head
	   then $Run rsync $rsync_opts --quiet \
			   $snap_host:$_project/HEAD/.snap/push.log .snap/
		local old_rev=$(< .snap/revision)
	   else local old_rev=
	fi

	# reversed_lines .snap/push.log	# show newest log records first
	cat .snap/push.log		# show oldest first, in case too many

	[[ $old_rev ]] &&
	   warn "your last pull was $old_rev, your workspace is out-of-date"

	[[ $(tail -n1 .snap/push.log) == "$head_rev "* ]] && return
return	     # must first fix push.log records by incrementing revision # 
	warn "missing $head_rev record, see below; ask Scott to fix this"
	snap_log_ "$@" | tail -n3
}

# ----------------------------------------------------------------------------

snap_du() {
	[[ ${1-} == -* ]] && { local du_opts=$1; shift; } || local du_opts=
	local _project=${1:-$project}

	[[ -o xtrace ]] && local xtrace= || local xtrace="set +x"
	$Trace
	# empty Linux directories are 4 KB; GNU ls displays as 4.0K when -h
	server_snap_q du -h -s $du_opts "${_project:-*}" | egrep -v '^4.0K'
	$xtrace
}

# ----------------------------------------------------------------------------
# main
# ----------------------------------------------------------------------------

readonly action=$1; shift
readonly _our_name="$our_name"		# when don't want action in msg
readonly  our_name="$our_name $action"	# for 'error' function

$trace

cd___source_config___set_project__local_rev__rsync_opts__snap_host ||
case $action in
   ( orig* | pull | tags | log | du | df | ls | cat | head | tail | rm )
	;;				# these accept project as argument
   ( * ) error "couldn't find root of git workspace" ;;
esac

case $action in
   ( orig*) snap_origin "$@" ;;
   ( pull ) snap_pull "$@" ;;
   ( push ) snap_push "$@" ;;
   ( st*  ) snap_stat "$@" ;;
   ( tag  ) snap_tag  "$@" ;;
   ( tags ) snap_tags "$@" ;;
   ( log* ) snap_log  "$@" ;;
   ( du   ) snap_du   "$@" ;;
   ( df | ls | cat | head | tail | rm )
	[[ $action == ls && $# == 0 ]] && set -- -CF
	run_server_snap $action "$@" ;;
   ( * ) error "action '$action' is not supported" ;;
esac
